DROP TABLE IF EXISTS account;
CREATE TABLE account (
  id SERIAL,
  username VARCHAR(255) NOT NULL DEFAULT '',
  password VARCHAR(255) NOT NULL DEFAULT '',
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  encr_session_password TEXT NOT NULL DEFAULT '',
  vip BOOLEAN NOT NULL DEFAULT FALSE,
  active BOOLEAN NOT NULL DEFAULT FALSE,
  storage_quota TEXT NOT NULL DEFAULT '',
  PRIMARY KEY (id)
);
CREATE UNIQUE INDEX account_username ON account(username);

ALTER TABLE account ALTER COLUMN created_at SET DEFAULT now();
ALTER SEQUENCE account_id_seq RESTART WITH 1;

COMMENT ON TABLE account IS 'Collection of spoon.pw account records.';
COMMENT ON COLUMN account.id IS 'Unique account record ID, used as a primary key.';
COMMENT ON COLUMN account.username IS 'Unique username to identify the account.';
COMMENT ON COLUMN account.password IS 'Bcrypt hash of the accounts password.';
COMMENT ON COLUMN account.created_at IS 'The date/timestamp of when the account was created.';
COMMENT ON COLUMN account.encr_session_password IS 'Encrypted version of the accounts password.';
COMMENT ON COLUMN account.vip IS 'Defines whether the account is a VIP or not.';
COMMENT ON COLUMN account.active IS 'Defines whether the account is activated or not.';
COMMENT ON COLUMN account.storage_quota IS 'Defines how much (in GB) cloud storage an account is allowed to have.';


DROP TABLE IF EXISTS invite_codes;
CREATE TABLE invite_codes (
  id SERIAL,
  invite_code VARCHAR(12) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  generated_by INT NOT NULL,
  used BOOLEAN NOT NULL DEFAULT FALSE,
  used_by VARCHAR(255) NOT NULL DEFAULT '',
  PRIMARY KEY (id),
  CONSTRAINT invite_codes_ibfk_1 FOREIGN KEY (generated_by) REFERENCES account(id) ON DELETE CASCADE ON UPDATE CASCADE
);
ALTER TABLE invite_codes ALTER COLUMN created_at SET DEFAULT now();
ALTER SEQUENCE invite_codes_id_seq RESTART WITH 1;
COMMENT ON TABLE invite_codes IS 'Invite codes';
COMMENT ON COLUMN invite_codes.id IS 'Unique invite code record ID';
COMMENT ON COLUMN invite_codes.invite_code IS 'Invite code string/content';
COMMENT ON COLUMN invite_codes.created_at IS 'When the invite code was created';
COMMENT ON COLUMN invite_codes.generated_by IS 'Who the invite code was generated by (account ID)';
COMMENT ON COLUMN invite_codes.used IS 'Invite code has been used?';
COMMENT ON COLUMN invite_codes.used_by IS 'Who the invite code has been used by';


DROP TABLE IF EXISTS email_owners;
CREATE TABLE email_owners (
  account_id INT NOT NULL,
  email_addr VARCHAR(255) NOT NULL,
  PRIMARY KEY (account_id, email_addr),
  CONSTRAINT email_owners_ibfk_1 FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE ON UPDATE CASCADE
);

COMMENT ON TABLE email_owners IS 'Record of emails owned by an account';
COMMENT ON COLUMN email_owners.account_id IS 'The email owners account ID.';
COMMENT ON COLUMN email_owners.email_addr IS 'The email address they own.';


DROP TABLE IF EXISTS storage;
CREATE TABLE storage (
  account_id INT NOT NULL,
  name TEXT NOT NULL,
  folder_hash VARCHAR(32) NOT NULL,
  PRIMARY KEY (account_id, folder_hash),
  CONSTRAINT storage_ibfk_1 FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE UNIQUE INDEX storage_folder_hash ON storage(folder_hash);

COMMENT ON TABLE storage IS 'Record of storage collections owned by an account';
COMMENT ON COLUMN storage.account_id IS 'The email owners account ID.';
COMMENT ON COLUMN storage.name IS 'Memorable name of their storage folder to identify their collection, displayed on the interface.';
COMMENT ON COLUMN storage.folder_hash IS 'Unique random hash to identify the users storage folder in the filesystem.';


